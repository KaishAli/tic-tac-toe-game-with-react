{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Board","_React$useState","React","useState","Array","fill","_React$useState2","Object","slicedToArray","squares","setSquares","nextValue","filter","Boolean","length","calculateNextValue","winner","lines","i","_lines$i","a","b","c","alert","calculateWinner","status","concat","every","calculateStatus","renderSquare","react_default","createElement","className","onClick","square","squaresCopy","toConsumableArray","selectSquare","Game","App","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MAGA,SAASA,IAAQ,IAAAC,EACeC,IAAMC,SAASC,MAAM,GAAGC,KAAK,OAD5CC,EAAAC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,GACRQ,EADQH,EAAA,GACCI,EADDJ,EAAA,GAGTK,EAoER,SAA4BF,GAC1B,OAAOA,EAAQG,OAAOC,SAASC,OAAS,IAAM,EAAI,IAAM,IArEtCC,CAAmBN,GAC/BO,EAuER,SAAyBP,GAWvB,IAVA,IAAMQ,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAC,EAAI,EAAGA,EAAID,EAAMH,OAAQI,IAAK,KAAAC,EAAAZ,OAAAC,EAAA,EAAAD,CACnBU,EAAMC,GADa,GAC9BE,EAD8BD,EAAA,GAC3BE,EAD2BF,EAAA,GACxBG,EADwBH,EAAA,GAEjCV,EAAQW,IAAMX,EAAQW,KAAOX,EAAQY,IAAMZ,EAAQW,KAAOX,EAAQa,IAEpEC,MAAMd,EAAQW,GAAG,cAGrB,OAAO,KAzFQI,CAAgBf,GACzBgB,EA0DR,SAAyBT,EAAQP,EAASE,GACxC,OAAOK,EAAM,WAAAU,OACEV,GACXP,EAAQkB,MAAMd,SAAd,sCAAAa,OAEgBf,GA/DLiB,CAAgBZ,EAAQP,EAASE,GAehD,SAASkB,EAAaX,GACpB,OACEY,EAAAV,EAAAW,cAAA,UAAQC,UAAU,SAASC,QAAS,kBAfxC,SAAsBC,GACpB,IAAIlB,IAAUP,EAAQyB,GAAtB,CAGA,IAAMC,EAAW5B,OAAA6B,EAAA,EAAA7B,CAAOE,GACxB0B,EAAYD,GAAUvB,EACtBD,EAAWyB,IASiCE,CAAanB,KACpDT,EAAQS,IAKf,OACEY,EAAAV,EAAAW,cAAA,WACED,EAAAV,EAAAW,cAAA,OAAKC,UAAU,UAAUP,GACzBK,EAAAV,EAAAW,cAAA,OAAKC,UAAU,aACZH,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhBC,EAAAV,EAAAW,cAAA,OAAKC,UAAU,aACZH,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhBC,EAAAV,EAAAW,cAAA,OAAKC,UAAU,aACZH,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhBC,EAAAV,EAAAW,cAAA,UAAQC,UAAU,UAAUC,QA9BhC,WACEvB,EAAWN,MAAM,GAAGC,KAAK,SA6BvB,YAON,SAASiC,IACP,OACER,EAAAV,EAAAW,cAAA,OAAKC,UAAU,QACbF,EAAAV,EAAAW,cAAA,OAAKC,UAAU,cACbF,EAAAV,EAAAW,cAAC/B,EAAD,QA2COuC,MAJf,WACE,OAAOT,EAAAV,EAAAW,cAACO,EAAD,OC1FWzB,QACW,cAA7B2B,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOf,EAAAV,EAAAW,cAACe,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5fbc8a50.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./App.css\";\r\n\r\nfunction Board() {\r\n  const [squares, setSquares] = React.useState(Array(9).fill(null))\r\n\r\n  const nextValue = calculateNextValue(squares)\r\n  const winner = calculateWinner(squares)\r\n  const status = calculateStatus(winner, squares, nextValue)\r\n\r\n  function selectSquare(square) {\r\n    if (winner || squares[square]) {\r\n      return\r\n    }\r\n    const squaresCopy = [...squares]\r\n    squaresCopy[square] = nextValue\r\n    setSquares(squaresCopy)\r\n  }\r\n\r\n  function restart() {\r\n    setSquares(Array(9).fill(null))\r\n  }\r\n\r\n  function renderSquare(i) {\r\n    return (\r\n      <button className=\"square\" onClick={() => selectSquare(i)}>\r\n        {squares[i]}\r\n      </button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"status\">{status}</div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(0)}\r\n        {renderSquare(1)}\r\n        {renderSquare(2)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(3)}\r\n        {renderSquare(4)}\r\n        {renderSquare(5)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(6)}\r\n        {renderSquare(7)}\r\n        {renderSquare(8)}\r\n      </div>\r\n      <button className=\"restart\" onClick={restart}>\r\n        restart\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Game() {\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction calculateStatus(winner, squares, nextValue) {\r\n  return winner\r\n    ? `Winner: ${winner}`\r\n    : squares.every(Boolean)\r\n    ? `Scratch: Cat's game`\r\n    : `Next player: ${nextValue}`\r\n}\r\n\r\nfunction calculateNextValue(squares) {\r\n  return squares.filter(Boolean).length % 2 === 0 ? 'X' : 'O'\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ]\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i]\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      // return squares[a]\r\n      alert(squares[a]+\" is winner\")\r\n    }\r\n  }\r\n  return null\r\n}\r\n\r\nfunction App() {\r\n  return <Game />\r\n}\r\n\r\nexport default App","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}